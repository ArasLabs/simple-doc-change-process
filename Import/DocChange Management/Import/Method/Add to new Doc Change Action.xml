<AML>
 <Item type="Method" id="B133C67642F44A5496A181762F0A35D1" action="add">
  <method_code><![CDATA[// Method called by an Action on Document Item
//  this will put the highlighted Item directly into a new Doc Change (process)
//  
//  this.  is the incoming Item
// 
//  Rolf     08.Aug.2008   adapted from Peter's "Add to new ECN" action/method
//
// =======================================================================================================

// get the list of highlighted ID's.
// decide if this is MainGrid or Tear-off Window or relationship window
var idString="";
var TYPE = this.getType();
var is_relationship_action=false;

if (TYPE=='Part BOM' || TYPE=='Part Document' || TYPE=='Doc Folder Document') {
   /// this is a relationship Action
   is_relationship_action=true;
}
if (is_relationship_action) {
   if (!document.frames[2].document.frames[0].document.grid ) {
      alert('Action error: Grid not found');
      return;
   }
   idString=document.frames[2].document.frames[0].document.grid.getSelectedItemIds(",");
} else {
	if (top.main) {
		idString= top.main.work.gridApplet.getSelectedItemIds(",");
	} else {
		idString= this.getID();
	}
}

var IDs=idString.split(",");
if (IDs.length===0) {
	alert('Action error:  No IDs are found');
	return;
}

//alert(idString);

if (IDs.length == 1) {
	idString="'" + idString + "'";
} else {
    // this is a multi-select, decide if this is repeat call or not
    if (top.CreateECNList) {
       if (top.CreateECNList==idString) {
           //alert('Skipping');
           return;
       }
    }
    //alert('doing');
    top.CreateECNList = idString;
    
	idString="'" + IDs[0] + "'";
	for (var i=1; i<IDs.length; i++) {
		 idString += ",'" + IDs[i] + "'";
	}
}

var myQry = "";
if (is_relationship_action) {
	myQry = this.newItem(TYPE,"get");
	myQry.setAttribute("select","related_id(state,keyed_name,major_rev,is_released)");
} else {
	myQry = this.newItem(TYPE,"get");
	myQry.setAttribute("select","state,keyed_name,major_rev,is_released");
}

myQry.setProperty("is_current","1");
myQry.setProperty("id",idString);
myQry.setPropertyAttribute("id","condition","in");
myQry = myQry.apply();
if ( myQry.isError() ) {
	alert('Action error:  ' + myQry.getErrorDetail() );
	return;
}


// must always be type document
TYPE='Document';
 
var myItems=myQry.getItemsByXPath("//Item[@type='" + TYPE + "']");
if (myItems.getItemCount() === 0) {
   alert('No current ' + TYPE + ' revs found in selected list');
   return;
}

// check if items are still lock, abort if true
// this is to avoid incosistencies linking to an old generation in case changes were not
// saved before this action started !!!
for (i=0; i<myItems.getItemCount(); i++) {
   myItem = myItems.getItemByIndex(i);
   if (myItem.isLocked()) {
      alert( "Item '" + myItem.getProperty("keyed_name","") + "' is still locked. Please unlock all items, first and try again.");
      return;
   }
}

//debugger;

// create the blank DocChange
var DocChange = this.newItem('Doc Change','add');
DocChange = DocChange.apply();
if ( DocChange.isError() ) {
      alert( DocChange.getErrorDetail() );
      return;
}
// get created an lock it for update
DocChange = DocChange.getItemByIndex(0);
DocChange = DocChange.lockItem();
if ( DocChange.isError() ) {
      alert( DocChange.getErrorDetail() );
      return;
}
DocChange.setAttribute('action','update');

var Affected;
var results;
for (i=0; i<myItems.getItemCount(); i++) {
   myItem = myItems.getItemByIndex(i);

   Affected = DocChange.newItem("Doc Change Affected Documents","add");
   Affected.setPropertyItem("related_id", myItem);

   DocChange.addRelationship(Affected);
}

DocChange = DocChange.apply();

top.aras.uiShowItemEx(DocChange.node, undefined,true);
]]></method_code>
  <method_type>JavaScript</method_type>
  <name>Add to new Doc Change Action</name>
 </Item>
</AML>